/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);*/
 var HelloWorld = React.createClass({
  render: function() {
    return (
      <p>
        Hello, <input type="text" placeholder="Your name here" />!
        It is {this.props.date.toTimeString()}
      </p>
    );
  }
});

setInterval(function() {
  ReactDOM.render(
    <HelloWorld date={new Date()} />,
    document.getElementById('example')
  );
}, 500);


var hello = "Robert";

 var Abc = React.createClass({
  render: function() {
    return (
      <p>
        {hello}
      </p>
    );
  }
});
var myElement = <Abc data-custom-attribute="foo" />;
ReactDOM.render(myElement, document.getElementById('content'));

var LikeButton = React.createClass({
  getInitialState: function() {
    return {liked: false};
  },
  handleClick: function(event) {
    this.setState({liked: !this.state.liked});
  },
  render: function() {
    console.log(this)
    var text = this.state.liked ? 'like' : 'haven\'t liked';
    return (
      <p onClick={this.handleClick}>
        You {text} this. Click to toggle.<img src=""/>
      </p>
    );
  }
});

ReactDOM.render(
  <LikeButton />,
  document.getElementById('btn')
);


var Input = React.createClass({
              getInitialState: function() {
                  return {value: 'https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2015/06/10-dithering-opt.jpg'};
              },
              handleChange: function(event) {
                  this.setState({value: event.target.value});
              },
             createDiv: function(event){
                console.log(this.props.index)
                var newDiv = React.createElement(AbsoluteDiv, {style: {color: "red", backgroundColor: "green"}})
                 console.log(event.clientX, event.clientY);
                 ReactDOM.render(newDiv, document.getElementById(this.props.index));
             },
              render: function () {
                  var value = this.state.value;
                  return (
                          <div  className="box" id={this.props.id}>
                              <input type="text" value={value} onChange={this.handleChange} />  <img src={value}></img>
                            <ul>
                                <li>http://www.image-mapper.com/photos/original/missing.png?1263880893</li> 
                                <button onClick={this.createDiv}>Use this</button>
                            </ul>
                          </div>
                  );
              }
          });


var AbsoluteDiv = React.createClass({
            closeBox: function(){
                this.remove()
            },
             render: function () {
                 //var pos = '0px';
                  return (
                        
                          <div className="newDiv">
                                <span onClick={this.closeBox}>X</span>
                              Hello
                          </div>
                  );
              }
          });


var divStyle = {
 
    height: '19%',
    width: '19%',  display: 'inline-block'
 
};




var Boxes = React.createClass({
    
      render: function render() {
    var boards = [];
   
    for (var ii = 0; ii < 20; ii++) {
      // We can compare to state here so we're no longer always selecting the first board.
     
      boards.push(React.createElement(Input, { index: ii, key: ii, id: ii}));
    }

    return React.createElement(
      "div",
      null,
      React.createElement(
        "i",
        { className: "boards" },
        boards
      )
    );
  }
});

            //ReactDOM.render(<Input/>, document.getElementById('img'));
ReactDOM.render(React.createElement(Boxes, { numBoards: 9 }), document.getElementById('img'));